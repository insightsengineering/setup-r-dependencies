---
name: Setup R dependencies
author: Insights Engineering
description: GitHub Action to install R package dependencies

inputs:
  github-token:
    description: GitHub token.
    required: false
    default: ""
  repository-path:
    description: Directory where the R package is located relative to the calling GitHub workflow workspace.
    required: false
    default: "."
  lookup-refs:
    description: |
      List of package references to be used for the feature branch.
      Multiple entries in new lines or separated by commas.
      Only GitHub references are supported.
    required: false
    default: ""
  dependencies:
    description: Passed to `r-lib/actions/setup-r-dependencies`.
    required: false
    default: '"all"'
  extra-packages:
    description: Passed to `r-lib/actions/setup-r-dependencies`.
    required: false
    default: ""
  needs:
    description: |
      Passed to `r-lib/actions/setup-r-dependencies`.
      The value will be amended by `DepsBranch` and `DepsDev` values.
    required: false
    default: ""
  skip-desc-branch:
    description: Skip the DESCRIPTION file modification for the feature branch.
    required: false
    default: false
  skip-desc-dev:
    description: Skip the DESCRIPTION file modification for the development branch.
    required: false
    default: false
  skip-install:
    description: Skip the installation of R package dependencies.
    required: false
    default: false
  max-iter:
    description: Maximum number of iterations to resolve dependencies.
    required: false
    default: 10
  repository-list:
    description: |
      Comma-separated list of pkgcache-compatible repository names from which the dependencies will be downloaded.
    required: false
    default: "https://pharmaverse.r-universe.dev,PPM@latest"

branding:
  icon: 'download'
  color: 'orange'

runs:
  using: composite
  steps:

  - name: Get branch names
    id: branch-names
    uses: tj-actions/branch-names@v8

  - name: Get current branch or tag 🏷️
    id: current-branch-or-tag
    run: |
      if [ "${{ steps.branch-names.outputs.is_tag }}" == "true" ]; then
        echo "Current tag: ${{ steps.branch-names.outputs.tag }}"
        echo "ref-name=${{ steps.branch-names.outputs.tag }}" >> $GITHUB_OUTPUT
      else
        echo "Current branch: ${{ steps.branch-names.outputs.current_branch }}"
        echo "ref-name=${{ steps.branch-names.outputs.current_branch }}" >> $GITHUB_OUTPUT
      fi
    shell: bash

  - name: Set repositories
    run: |
      # Installation of curl required by pkgcache fails because:
      # Configuration failed because libcurl was not found. Try installing:
      # * deb: libcurl4-openssl-dev (Debian, Ubuntu, etc)
      # * rpm: libcurl-devel (Fedora, CentOS, RHEL)
      # Installation of libcurl is specifically needed for: ubuntu-clang, ubunut-gcc12, ubuntu-next
      # ubuntu-release, donttest R-hub checks.
      if [ "${{ runner.os }}" == "Linux" ]; then
        if [ -n "$(cat /etc/*release | grep ID | grep fedora)" ]; then
          apt-get update
          apt-get install -yq libcurl4-openssl-dev
        elif [ -n "$(cat /etc/*release | grep ID | grep ubuntu)" ]; then
          dnf install -y libcurl-devel
        fi
      fi
      R -s -q <<RSCRIPT
      getOption("repos")
      if (!require("pkgcache")) install.packages("pkgcache", repos='http://cloud.r-project.org')
      RSCRIPT
      cat > ${HOME}/.Rprofile <<EOF
      repository_list <- unlist(strsplit(
        "${{ inputs.repository-list }}", split=","
      ))
      options(repos = c(vapply(repository_list, pkgcache::repo_resolve, character(1)), pkgcache::default_cran_mirror(), getOption("repos")))
      EOF
      R -s -q <<RSCRIPT
      cat("Resolved repositories loaded from .Rprofile:\n")
      getOption("repos")
      RSCRIPT
      echo "Repositories written to ${HOME}/.Rprofile:"
      cat ${HOME}/.Rprofile
    shell: bash

  - name: Install required packages
    uses: r-lib/actions/setup-r-dependencies@v2
    with:
      packages: ""
      extra-packages: |
        any::sessioninfo
        any::pkgdepends
        any::cli
        any::desc
      install-pandoc: false

  - name: Prepare utils
    id: utils
    shell: Rscript {0}
    run: |
      cat("::group::Define utils\n")
      desc_field_append <- function(d, key, value) {
        old_values <- d$get_field(key)
        old_values_v <- trimws(strsplit(x = old_values, split = ",")[[1]])
        new_values_v <- unique(c(old_values_v, value))
        new_values <- paste(new_values_v, collapse = ", ")
        d$set_list(key, new_values)
      }
      desc_field_clear_if_empty <- function(d, key) {
        if (d$has_fields(key) && d$get_field(key) == "") {
          d$del(key)
        }
      }
      find_ref <- function(package, refs) {
        res <- Filter(
          x = pkgdepends::parse_pkg_refs(refs),
          f = function(ref) {
            ref$package == package
          }
        )
        if (length(res) == 0) {
          return(NULL)
        }
        if (length(res) > 1) {
          warning(sprintf("Multiple refs found for package %s. Only the first one will be used.", package))
        }
        res <- res[[1]]
        if (isFALSE(is(res, "remote_ref_github"))) {
          warning(sprintf("Ref for package %s is not a GitHub type of ref.", package))
          return(NULL)
        }
        return(res)
      }
      remote_ref_add_branch <- function(remote_ref, branch_name) {
        pkgdepends::parse_pkg_ref(
          sprintf(
            "%s@%s",
            gsub(
              "//@.*",
              "",
              remote_ref$ref
            ),
            branch_name
          )
        )
      }
      remote_ref_ping <- function(remote_ref) {
        x <- pkgdepends::new_pkg_deps(remote_ref$ref, config = list(dependencies = FALSE))
        x$solve()
        x$get_solution()$status == "OK"
      }
      new_pkg_deps <- function(refs) {
        pkgdepends::new_pkg_deps(
          refs,
          config = list(
            dependencies = c(
              sprintf("Config/Needs/%s", strsplit("${{ inputs.needs }}", "[[:space:],]+")[[1]]),
              "Config/Needs/DepsBranch",
              "Config/Needs/DepsDev",
              pkgdepends::as_pkg_dependencies(${{ inputs.dependencies }})$direct
            )
          )
        )
      }
      parse_input <- function(input) {
        trimws(strsplit(x = gsub("\n", ",", input), split = ",")[[1]])
      }
      log_vars <- function(...) {
        args <- list(...)
        arg_names <- substitute(...())
        for (i in seq_along(args)) {
          cli::cli_alert_info("Variable {.code {arg_names[[i]]}}: {.val {args[[i]]}}.")
        }
      }
      cat("::endgroup::\n")
      cat("::group::Save utils\n")
      save.image(file = "utils.R")
      cat("::endgroup::\n")

  - name: Prepare DESCRIPTION file (feature branch)
    if: >
      inputs.skip-desc-branch == 'false' &&
      steps.branch-names.outputs.is_default != 'true' &&
      inputs.lookup-refs != ''
    id: desc-branch
    shell: Rscript {0}
    run: |
      cat("::group::Load utils\n")
      load("utils.R")
      cat("::endgroup::\n")

      cat("::group::Parse inputs\n")
      path <- parse_input("${{ inputs.repository-path }}")
      lookup_refs <- parse_input("${{ inputs.lookup-refs }}")
      current_branch <- parse_input("${{ steps.current-branch-or-tag.outputs.ref-name }}")
      log_vars(path, lookup_refs, current_branch)
      cat("::endgroup::\n")

      cat("::group::Assertions\n")
      if (isFALSE(file.exists(file.path(path, "DESCRIPTION")))) {
        cli::cli_alert_danger("{.file DESCRIPTION} file not found in {.path {path}}. Skipping.")
        cat("::endgroup::\n")
        q(save = "no")
      }
      parsed_lookup_refs <- pkgdepends::parse_pkg_refs(lookup_refs)
      if (any(!vapply(parsed_lookup_refs, is, logical(1), "remote_ref_github"))) {
        incorrect_idx <- which(!vapply(parsed_lookup_refs, is, logical(1), "remote_ref_github"))
        cli::cli_alert_danger("All lookup refs must be GH refs. Incorrect refs: {.val {lookup_refs[incorrect_idx]}}.")
        cat("::endgroup::\n")
        q(save = "no")
      }
      cat("::endgroup::\n")

      cat("::group::Modify DESCRIPTION file (feature branch)\n")
      d <- desc::desc(path)
      d$set_list("Config/Needs/DepsBranch", character(0))

      x <- new_pkg_deps(sprintf("local::%s", path))
      x$resolve()
      deps <- x$get_resolution()$package

      for (i_ref in lookup_refs) {
        cli::cli_alert_info("Processing lookup reference {.field {i_ref}}.")

        i_remote_ref <- pkgdepends::parse_pkg_ref(i_ref)
        i_package <- i_remote_ref$package

        if (isFALSE(i_package %in% deps)) {
          cli::cli_alert_info("Package {.pkg {i_package}} is not a dependency. Skipping.")
          next
        }

        i_remote_ref_branch <- remote_ref_add_branch(i_remote_ref, current_branch)
        if (isFALSE(remote_ref_ping(i_remote_ref_branch))) {
          cli::cli_alert_info("Feature branch {.field {current_branch}} does not exist for reference {.field {i_ref}}. Skipping.")
          next
        }

        desc_field_append(d, "Config/Needs/DepsBranch", i_remote_ref_branch$ref)
        cli::cli_alert_success("Reference {.field {i_remote_ref_branch$ref}} added to the {.field Config/Needs/DepsBranch} field.")
      }

      desc_field_clear_if_empty(d, "Config/Needs/DepsBranch")
      d$write(path)
      cat("::endgroup::\n")

      cat("::group::Print added field\n")
      cat(d$get("Config/Needs/DepsBranch"))
      cat("\n")
      cat("::endgroup::\n")

      cat("::group::Print DESCRIPTION file\n")
      d
      cat("::endgroup::\n")

  - name: Prepare DESCRIPTION file (development)
    if: >
      ${{ inputs.skip-desc-dev == 'false' }} &&
      ${{ inputs.lookup-refs != '' }}
    id: desc-dev
    shell: Rscript {0}
    run: |
      cat("::group::Load utils\n")
      load("utils.R")
      cat("::endgroup::\n")

      cat("::group::Parse inputs\n")
      path <- parse_input("${{ inputs.repository-path }}")
      lookup_refs <- parse_input("${{ inputs.lookup-refs }}")
      max_iter <- as.integer("${{ inputs.max-iter }}")
      log_vars(path, lookup_refs, max_iter)
      cat("::endgroup::\n")

      cat("::group::Assertions\n")
      if (isFALSE(file.exists(file.path(path, "DESCRIPTION")))) {
        cli::cli_alert_danger("{.file DESCRIPTION} file not found in {.path {path}}. Skipping.")
        cat("::endgroup::\n")
        q(save = "no")
      }
      parsed_lookup_refs <- pkgdepends::parse_pkg_refs(lookup_refs)
      if (any(!vapply(parsed_lookup_refs, is, logical(1), "remote_ref_github"))) {
        incorrect_idx <- which(!vapply(parsed_lookup_refs, is, logical(1), "remote_ref_github"))
        cli::cli_alert_danger("All lookup refs must be GH refs. Incorrect refs: {.val {lookup_refs[incorrect_idx]}}.")
        cat("::endgroup::\n")
        q(save = "no")
      }
      cat("::endgroup::\n")

      cat("::group::Modify DESCRIPTION file (development)\n")
      d <- desc::desc(path)
      d$set_list("Config/Needs/DepsDev", character(0))

      x <- new_pkg_deps(sprintf("local::%s", path))
      x$solve()

      i <- 0L
      failures_message_prev <- NULL
      while (i <= max_iter) {
        i <- i + 1L

        x$solve()

        if (x$get_solution()$status == "OK") {
          cli::cli_alert_success("Dependencies resolved successfully.")
          break()
        }

        failures <- x$get_solution()$failures
        failed_refs <- unique(unlist(failures[, "failure_down"]))
        cli::cli_alert_warning("Failed to resolve dependencies. Failed refs: {.pkg {failed_refs}}.")
        cli::cli_text("Error:")
        cat(format(failures))
        cat("\n")
        cli::cli_text("End of error")

        failure_message <- failures$failure_message
        if (identical(failure_message, failures_message_prev)) {
          cli::cli_alert_danger("Failed to resolve dependencies. No progress. Exiting.")
          break()
        }
        failures_message_prev <- failure_message

        for (failed_ref in failed_refs) {
          pkg <- pkgdepends::parse_pkg_ref(failed_ref)$package
          pkg_ref <- find_ref(pkg, lookup_refs)
          if (length(pkg_ref) == 0) {
            cli::cli_alert_danger("Package {.pkg {pkg}} not found in the {.code lookup_refs} list: {.val {lookup_refs}}. Exiting.")
            break()
          }
          cli::cli_alert_info("Adding package {.pkg {pkg}} (ref: {.val {pkg_ref$ref}}) to the {.field Config/Needs/DepsDev} field.")
          desc_field_append(d, "Config/Needs/DepsDev", pkg_ref$ref)
          d$write(path)
        }

        cli::cli_alert_info("Trying to resolve dependencies again.")
        cli::cli_text("---")
        x <- new_pkg_deps(sprintf("local::%s", path))
      }

      desc_field_clear_if_empty(d, "Config/Needs/DepsDev")
      d$write(path)
      cat("::endgroup::\n")

      cat("::group::Print added field\n")
      cat(d$get("Config/Needs/DepsDev"))
      cat("\n")
      cat("::endgroup::\n")

      cat("::group::Print DESCRIPTION file\n")
      d
      cat("::endgroup::\n")

  - name: Remove utils
    id: remove-utils
    shell: bash
    run: rm utils.R

  - uses: r-lib/actions/setup-r-dependencies@v2
    if: ${{ inputs.skip-install == 'false' }}
    with:
      working-directory: ${{ inputs.repository-path }}
      extra-packages: ${{ inputs.extra-packages }}
      needs: |
        ${{ inputs.needs }}
        DepsBranch
        DepsDev
      dependencies: ${{ inputs.dependencies }}
